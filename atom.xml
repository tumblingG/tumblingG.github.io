<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zcblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tumbling.top/"/>
  <updated>2019-06-03T16:02:02.310Z</updated>
  <id>https://tumbling.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rxjs的debounceTime无效问题</title>
    <link href="https://tumbling.top/2019/06/04/rxjs%E7%9A%84debounceTime%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://tumbling.top/2019/06/04/rxjs的debounceTime无效问题/</id>
    <published>2019-06-03T16:02:02.310Z</published>
    <updated>2019-06-03T16:02:02.310Z</updated>
    
    <content type="html"><![CDATA[<p>事情起因：angular中用rxjs的<code>debounceTime</code>来做一个请求防抖动功能，使其在用户输入的时候不会频繁发送请求，后来发现这样做是不行的。</p><a id="more"></a><h1 id="1-debounceTime功能描述"><a href="#1-debounceTime功能描述" class="headerlink" title="1. debounceTime功能描述"></a>1. debounceTime功能描述</h1><p>这里官网的一段描述，详情参考：<a href="https://rxjs.dev/api/operators/debounceTime" target="_blank" rel="noopener">debounceTime</a></p><blockquote><p>Emits a value from the source Observable only after a particular time span has passed without another source emission.</p></blockquote><p>意思是：在一个特殊的时间间隔内没有接收到源的另一个新的提交值则提交当前<code>Obserable</code>发送的值。</p><p>这里有一点需要特别注意：这里的多次提交值的源是指<code>同一个源</code>，问题就出在这里。</p><p>下面给出一个官方的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounceTime &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = fromEvent(<span class="built_in">document</span>, <span class="string">'click'</span>);</span><br><span class="line"><span class="keyword">const</span> result = clicks.pipe(debounceTime(<span class="number">1000</span>));</span><br><span class="line">result.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure></p><p>注意这里的源只有一个<code>clicks</code>,无论在文档中点击多少次，值都是由这个observable发出的，所以能够成功。</p><h1 id="2-angular-http请求的情况"><a href="#2-angular-http请求的情况" class="headerlink" title="2. angular http请求的情况"></a>2. angular http请求的情况</h1><p><code>httpClient</code>的请求方法会返回一个<code>Obserable</code>，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getConfig = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.http.get(<span class="string">'/config'</span>).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something here</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么问题来了，如果我用<code>debounceTime</code>来防抖动，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounceTime &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getConfig = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.http.get(<span class="string">'/config'</span>).pipe(debounceTime(<span class="number">1000</span>))</span><br><span class="line">    .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something here</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好像这样子是没什么问题，其实不然，这里的<code>http.get()</code>每次返回不同的<code>Obserable</code>，<br>导致<code>debounceTime</code>好像没有设置一样。</p><h1 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h1><p><code>debounceTime</code>是不能用了，这里提供来一个简单的方法供参考：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer: any;</span><br><span class="line"><span class="keyword">const</span> getConfig = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="keyword">this</span>.http.get(<span class="string">'/config'</span>).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// do something here</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过使用定时器来实现，每次调用<code>getConfig()</code>方法的时候，如果时间间隔少于1s就会取消以前的请求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情起因：angular中用rxjs的&lt;code&gt;debounceTime&lt;/code&gt;来做一个请求防抖动功能，使其在用户输入的时候不会频繁发送请求，后来发现这样做是不行的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://tumbling.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="rxjs" scheme="https://tumbling.top/tags/rxjs/"/>
    
  </entry>
  
</feed>
