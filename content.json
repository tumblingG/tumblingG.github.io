{"meta":{"title":"zcblog","subtitle":null,"description":null,"author":"John Doe","url":"https://tumbling.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-05-29T15:09:53.428Z","updated":"2019-05-29T15:09:53.426Z","comments":true,"path":"404.html","permalink":"https://tumbling.top/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2019-06-01T06:28:14.891Z","updated":"2019-06-01T06:28:14.889Z","comments":true,"path":"about/index.html","permalink":"https://tumbling.top/about/index.html","excerpt":"","text":"我是一只小小鸟"},{"title":"","date":"2019-05-29T15:08:32.017Z","updated":"2019-05-29T15:08:32.017Z","comments":true,"path":"mylist/index.html","permalink":"https://tumbling.top/mylist/index.html","excerpt":"","text":""},{"title":"帅哥美女","date":"2019-06-01T06:26:40.886Z","updated":"2019-06-01T06:26:40.884Z","comments":true,"path":"friends/index.html","permalink":"https://tumbling.top/friends/index.html","excerpt":"","text":"这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有分类","date":"2019-05-29T15:05:52.623Z","updated":"2019-05-29T15:05:52.622Z","comments":true,"path":"categories/index.html","permalink":"https://tumbling.top/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-05-29T16:53:15.715Z","updated":"2019-05-29T16:53:15.715Z","comments":true,"path":"projects/index.html","permalink":"https://tumbling.top/projects/index.html","excerpt":"","text":"haha"},{"title":"所有标签","date":"2019-05-29T15:05:52.627Z","updated":"2019-05-29T15:05:52.626Z","comments":true,"path":"tags/index.html","permalink":"https://tumbling.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"rxjs的debounceTime无效问题","slug":"rxjs的debounceTime无效问题","date":"2019-06-03T16:02:02.310Z","updated":"2019-06-03T16:02:02.310Z","comments":true,"path":"2019/06/04/rxjs的debounceTime无效问题/","link":"","permalink":"https://tumbling.top/2019/06/04/rxjs的debounceTime无效问题/","excerpt":"事情起因：angular中用rxjs的debounceTime来做一个请求防抖动功能，使其在用户输入的时候不会频繁发送请求，后来发现这样做是不行的。","text":"事情起因：angular中用rxjs的debounceTime来做一个请求防抖动功能，使其在用户输入的时候不会频繁发送请求，后来发现这样做是不行的。 1. debounceTime功能描述这里官网的一段描述，详情参考：debounceTime Emits a value from the source Observable only after a particular time span has passed without another source emission. 意思是：在一个特殊的时间间隔内没有接收到源的另一个新的提交值则提交当前Obserable发送的值。 这里有一点需要特别注意：这里的多次提交值的源是指同一个源，问题就出在这里。 下面给出一个官方的例子:123456import &#123; fromEvent &#125; from 'rxjs';import &#123; debounceTime &#125; from 'rxjs/operators';const clicks = fromEvent(document, 'click');const result = clicks.pipe(debounceTime(1000));result.subscribe(x =&gt; console.log(x)); 注意这里的源只有一个clicks,无论在文档中点击多少次，值都是由这个observable发出的，所以能够成功。 2. angular http请求的情况httpClient的请求方法会返回一个Obserable，如下所示：12345const getConfig = () =&gt; &#123; this.http.get('/config').subscribe(res =&gt; &#123; // do something here &#125;);&#125; 那么问题来了，如果我用debounceTime来防抖动，代码如下所示：123456789import &#123; fromEvent &#125; from 'rxjs';import &#123; debounceTime &#125; from 'rxjs/operators';const getConfig = () =&gt; &#123; this.http.get('/config').pipe(debounceTime(1000)) .subscribe(res =&gt; &#123; // do something here &#125;);&#125; 好像这样子是没什么问题，其实不然，这里的http.get()每次返回不同的Obserable，导致debounceTime好像没有设置一样。 3. 解决方法debounceTime是不能用了，这里提供来一个简单的方法供参考：12345678910let timer: any;const getConfig = () =&gt; &#123; clearTimeout(timer); timer = setTimeout(() =&gt; &#123; clearTimeout(timer); this.http.get('/config').subscribe(res =&gt; &#123; // do something here &#125;); &#125;, 1000);&#125; 通过使用定时器来实现，每次调用getConfig()方法的时候，如果时间间隔少于1s就会取消以前的请求。","categories":[{"name":"前端","slug":"前端","permalink":"https://tumbling.top/categories/前端/"}],"tags":[{"name":"rxjs","slug":"rxjs","permalink":"https://tumbling.top/tags/rxjs/"}]}]}